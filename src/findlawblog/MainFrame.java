/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package findlawblog;

import java.awt.Color;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import java.awt.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.*;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

/**
 *
 * @author UC202958
 */
public class MainFrame extends javax.swing.JFrame {
    int xMouse;
    int yMouse;
    JFrame mainFrameWindow = new JFrame();
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        this.mainNavigarionPanelStatus = 0;
        this.processStatusPanelStatus = 0;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        containerPanel = new javax.swing.JPanel();
        processStatusPanel = new javax.swing.JPanel();
        txtareaResult = new javax.swing.JTextArea();
        mainNavigationPanel = new javax.swing.JPanel();
        newFormLabel = new javax.swing.JLabel();
        formLabel = new javax.swing.JLabel();
        newLabel = new javax.swing.JLabel();
        horizontalDivider = new javax.swing.JLabel();
        horizontalDivider1 = new javax.swing.JLabel();
        helpLabel = new javax.swing.JLabel();
        helpLabelMainMenu = new javax.swing.JLabel();
        panelHeader = new javax.swing.JPanel();
        menuButton = new javax.swing.JLabel();
        divider = new javax.swing.JLabel();
        logo = new javax.swing.JLabel();
        labelTool = new javax.swing.JLabel();
        labelBlog = new javax.swing.JLabel();
        minimizeButton = new javax.swing.JLabel();
        exitButton = new javax.swing.JLabel();
        dragFrame = new javax.swing.JLabel();
        panelHeaderBorder = new javax.swing.JPanel();
        panelFooter = new javax.swing.JPanel();
        footerBrand = new javax.swing.JLabel();
        panelBrowse = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtFolderName = new javax.swing.JTextField();
        btnBrowse = new javax.swing.JLabel();
        panelCheckBox = new javax.swing.JPanel();
        chckbxMobileSearch = new javax.swing.JCheckBox();
        chckbxCssCopy = new javax.swing.JCheckBox();
        chckbxBoxDesign = new javax.swing.JCheckBox();
        labelNoteThird = new javax.swing.JLabel();
        labelNoteSecond = new javax.swing.JLabel();
        noteDivider = new javax.swing.JLabel();
        labelNote = new javax.swing.JLabel();
        panelColorCustom = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtLinkColor = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtLinkHoverColor = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtFontFamily = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtButtonBoxDesign = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtButtonColor = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtButtonHoverColor = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtButtonBackColor = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtButtonBackHoverColor = new javax.swing.JTextField();
        panelProgress = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();
        btnDetails = new javax.swing.JLabel();
        percentageCount = new javax.swing.JLabel();
        btnShutDown = new javax.swing.JLabel();
        iconShutDown = new javax.swing.JLabel();
        labelShutDown = new javax.swing.JLabel();
        btnDelete = new javax.swing.JLabel();
        labelDeleteBlog = new javax.swing.JLabel();
        iconDeleteBlog = new javax.swing.JLabel();
        btnBackup = new javax.swing.JLabel();
        iconBackupBtn = new javax.swing.JLabel();
        labelBackup = new javax.swing.JLabel();
        btnReset = new javax.swing.JLabel();
        labelReset = new javax.swing.JLabel();
        iconReset = new javax.swing.JLabel();
        btnStart = new javax.swing.JLabel();
        labelStart = new javax.swing.JLabel();
        iconStart = new javax.swing.JLabel();
        macButtonBar = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(160, 150, 140));
        setName("mainFrameWindow"); // NOI18N
        setUndecorated(true);
        setResizable(false);
        setSize(new java.awt.Dimension(978, 650));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        containerPanel.setBackground(new java.awt.Color(160, 150, 140));
        containerPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        processStatusPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtareaResult.setEditable(false);
        txtareaResult.setColumns(20);
        txtareaResult.setFont(new java.awt.Font("Calibri", 0, 11)); // NOI18N
        txtareaResult.setLineWrap(true);
        txtareaResult.setRows(5);
        txtareaResult.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        txtareaResult.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        processStatusPanel.add(txtareaResult, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 260, 540));

        containerPanel.add(processStatusPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(979, 46, 260, 541));

        mainNavigationPanel.setBackground(new java.awt.Color(7, 12, 17));
        mainNavigationPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        newFormLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        newFormLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/new-form-img.gif"))); // NOI18N
        newFormLabel.setToolTipText("");
        newFormLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        newFormLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        newFormLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newFormLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                newFormLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                newFormLabelMouseExited(evt);
            }
        });
        mainNavigationPanel.add(newFormLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 54, 70));

        formLabel.setFont(new java.awt.Font("Knowledge Medium", 0, 13)); // NOI18N
        formLabel.setForeground(new java.awt.Color(255, 255, 255));
        formLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        formLabel.setText("Form");
        mainNavigationPanel.add(formLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 65, 54, 20));

        newLabel.setFont(new java.awt.Font("Knowledge Medium", 0, 13)); // NOI18N
        newLabel.setForeground(new java.awt.Color(255, 255, 255));
        newLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        newLabel.setText("New");
        mainNavigationPanel.add(newLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 54, 20));

        horizontalDivider.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        horizontalDivider.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/horizontal-divider.gif"))); // NOI18N
        horizontalDivider.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        mainNavigationPanel.add(horizontalDivider, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 54, 10));

        horizontalDivider1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        horizontalDivider1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/horizontal-divider.gif"))); // NOI18N
        horizontalDivider1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        mainNavigationPanel.add(horizontalDivider1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 170, 54, 10));

        helpLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        helpLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/help-img.gif"))); // NOI18N
        helpLabel.setToolTipText("");
        helpLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        helpLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        helpLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                helpLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                helpLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                helpLabelMouseExited(evt);
            }
        });
        mainNavigationPanel.add(helpLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, 54, 60));

        helpLabelMainMenu.setFont(new java.awt.Font("Knowledge Medium", 0, 13)); // NOI18N
        helpLabelMainMenu.setForeground(new java.awt.Color(255, 255, 255));
        helpLabelMainMenu.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        helpLabelMainMenu.setText("Help");
        mainNavigationPanel.add(helpLabelMainMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 142, 54, 20));

        containerPanel.add(mainNavigationPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(-54, 46, 54, 541));

        panelHeader.setBackground(new java.awt.Color(7, 12, 17));
        panelHeader.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        menuButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        menuButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/nav-btn.png"))); // NOI18N
        menuButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        menuButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                menuButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                menuButtonMouseExited(evt);
            }
        });
        panelHeader.add(menuButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 50, 44));

        divider.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/menu-divider.png"))); // NOI18N
        panelHeader.add(divider, new org.netbeans.lib.awtextra.AbsoluteConstraints(51, 0, 2, 44));

        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logo.gif"))); // NOI18N
        panelHeader.add(logo, new org.netbeans.lib.awtextra.AbsoluteConstraints(437, 0, -1, 44));

        labelTool.setFont(new java.awt.Font("Knowledge Medium", 0, 16)); // NOI18N
        labelTool.setForeground(new java.awt.Color(255, 255, 255));
        labelTool.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelTool.setText("Tool");
        panelHeader.add(labelTool, new org.netbeans.lib.awtextra.AbsoluteConstraints(513, 4, -1, 40));

        labelBlog.setFont(new java.awt.Font("Knowledge Medium", 0, 16)); // NOI18N
        labelBlog.setForeground(new java.awt.Color(236, 83, 10));
        labelBlog.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelBlog.setText("Blog");
        panelHeader.add(labelBlog, new org.netbeans.lib.awtextra.AbsoluteConstraints(477, 4, -1, 40));

        minimizeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/minimize-btn.gif"))); // NOI18N
        minimizeButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        minimizeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minimizeButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                minimizeButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                minimizeButtonMouseExited(evt);
            }
        });
        panelHeader.add(minimizeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(914, 17, 11, 11));

        exitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close-btn.gif"))); // NOI18N
        exitButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exitButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                exitButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                exitButtonMouseExited(evt);
            }
        });
        panelHeader.add(exitButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(936, 16, 11, 11));

        dragFrame.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                dragFrameMouseDragged(evt);
            }
        });
        dragFrame.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                dragFrameMousePressed(evt);
            }
        });
        panelHeader.add(dragFrame, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 978, 44));

        containerPanel.add(panelHeader, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        panelHeaderBorder.setBackground(new java.awt.Color(7, 12, 17));
        panelHeaderBorder.setForeground(new java.awt.Color(19, 26, 33));
        panelHeaderBorder.setName("headerBorderBottomPanel"); // NOI18N

        javax.swing.GroupLayout panelHeaderBorderLayout = new javax.swing.GroupLayout(panelHeaderBorder);
        panelHeaderBorder.setLayout(panelHeaderBorderLayout);
        panelHeaderBorderLayout.setHorizontalGroup(
            panelHeaderBorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 978, Short.MAX_VALUE)
        );
        panelHeaderBorderLayout.setVerticalGroup(
            panelHeaderBorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        containerPanel.add(panelHeaderBorder, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 44, 978, 2));

        panelFooter.setBackground(new java.awt.Color(7, 12, 17));
        panelFooter.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        footerBrand.setFont(new java.awt.Font("Knowledge Regular", 0, 28)); // NOI18N
        footerBrand.setForeground(new java.awt.Color(221, 133, 20));
        footerBrand.setText("FindLaw");
        panelFooter.add(footerBrand, new org.netbeans.lib.awtextra.AbsoluteConstraints(806, 20, -1, -1));

        containerPanel.add(panelFooter, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 587, 978, 63));

        panelBrowse.setBackground(new java.awt.Color(125, 117, 109));
        panelBrowse.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(142, 132, 122), 3));
        panelBrowse.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/folder-icon.png"))); // NOI18N
        panelBrowse.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(139, 14, -1, -1));

        jLabel3.setFont(new java.awt.Font("Knowledge Medium", 0, 15)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Folder Name");
        panelBrowse.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(168, 20, -1, -1));

        txtFolderName.setBackground(new java.awt.Color(219, 217, 214));
        txtFolderName.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        txtFolderName.setForeground(new java.awt.Color(7, 12, 17));
        txtFolderName.setToolTipText("");
        txtFolderName.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(72, 69, 67)), javax.swing.BorderFactory.createEmptyBorder(1, 6, 1, 6)));
        txtFolderName.setMargin(new java.awt.Insets(20, 20, 20, 20));
        panelBrowse.add(txtFolderName, new org.netbeans.lib.awtextra.AbsoluteConstraints(66, 59, 218, 28));

        btnBrowse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/browse-btn.png"))); // NOI18N
        btnBrowse.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBrowse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnBrowseMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnBrowseMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnBrowseMouseExited(evt);
            }
        });
        panelBrowse.add(btnBrowse, new org.netbeans.lib.awtextra.AbsoluteConstraints(296, 59, -1, -1));

        containerPanel.add(panelBrowse, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 82, 403, 140));

        panelCheckBox.setBackground(new java.awt.Color(125, 117, 109));
        panelCheckBox.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(142, 132, 122), 3));
        panelCheckBox.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        chckbxMobileSearch.setBackground(new java.awt.Color(125, 117, 109));
        chckbxMobileSearch.setFont(new java.awt.Font("Knowledge Medium", 0, 15)); // NOI18N
        chckbxMobileSearch.setForeground(new java.awt.Color(255, 255, 255));
        chckbxMobileSearch.setText("Mobile Search");
        chckbxMobileSearch.setActionCommand("   Box Design CSS");
        chckbxMobileSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chckbxMobileSearch.setFocusable(false);
        chckbxMobileSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/checkbox.gif"))); // NOI18N
        chckbxMobileSearch.setIconTextGap(5);
        chckbxMobileSearch.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/checkbox-hover.gif"))); // NOI18N
        panelCheckBox.add(chckbxMobileSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 28, 140, 16));

        chckbxCssCopy.setBackground(new java.awt.Color(125, 117, 109));
        chckbxCssCopy.setFont(new java.awt.Font("Knowledge Medium", 0, 15)); // NOI18N
        chckbxCssCopy.setForeground(new java.awt.Color(255, 255, 255));
        chckbxCssCopy.setText("No CSS Copy");
        chckbxCssCopy.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chckbxCssCopy.setFocusPainted(false);
        chckbxCssCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/checkbox.gif"))); // NOI18N
        chckbxCssCopy.setIconTextGap(5);
        chckbxCssCopy.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/checkbox-hover.gif"))); // NOI18N
        panelCheckBox.add(chckbxCssCopy, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 62, 110, 16));

        chckbxBoxDesign.setBackground(new java.awt.Color(125, 117, 109));
        chckbxBoxDesign.setFont(new java.awt.Font("Knowledge Medium", 0, 15)); // NOI18N
        chckbxBoxDesign.setForeground(new java.awt.Color(255, 255, 255));
        chckbxBoxDesign.setText("Box Design CSS");
        chckbxBoxDesign.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        chckbxBoxDesign.setFocusPainted(false);
        chckbxBoxDesign.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/checkbox.gif"))); // NOI18N
        chckbxBoxDesign.setIconTextGap(5);
        chckbxBoxDesign.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/images/checkbox-hover.gif"))); // NOI18N
        chckbxBoxDesign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chckbxBoxDesignActionPerformed(evt);
            }
        });
        panelCheckBox.add(chckbxBoxDesign, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 96, 130, 16));

        labelNoteThird.setFont(new java.awt.Font("Knowledge Medium", 0, 13)); // NOI18N
        labelNoteThird.setForeground(new java.awt.Color(255, 255, 255));
        labelNoteThird.setText(" and not CSS/Template Sites.");
        panelCheckBox.add(labelNoteThird, new org.netbeans.lib.awtextra.AbsoluteConstraints(175, 77, -1, -1));

        labelNoteSecond.setFont(new java.awt.Font("Knowledge Medium", 0, 13)); // NOI18N
        labelNoteSecond.setForeground(new java.awt.Color(255, 255, 255));
        labelNoteSecond.setText("This tool is for use only on SASS sites");
        panelCheckBox.add(labelNoteSecond, new org.netbeans.lib.awtextra.AbsoluteConstraints(175, 58, -1, -1));

        noteDivider.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/note-divider.gif"))); // NOI18N
        panelCheckBox.add(noteDivider, new org.netbeans.lib.awtextra.AbsoluteConstraints(175, 49, -1, -1));

        labelNote.setFont(new java.awt.Font("Knowledge Medium", 0, 15)); // NOI18N
        labelNote.setForeground(new java.awt.Color(255, 255, 255));
        labelNote.setText("NOTE:");
        panelCheckBox.add(labelNote, new org.netbeans.lib.awtextra.AbsoluteConstraints(175, 30, -1, -1));

        containerPanel.add(panelCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(494, 82, 403, 140));

        panelColorCustom.setBackground(new java.awt.Color(125, 117, 109));
        panelColorCustom.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(142, 132, 122), 3));
        panelColorCustom.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setFont(new java.awt.Font("Knowledge Medium", 0, 15)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Link Color");
        panelColorCustom.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 39, -1, -1));

        txtLinkColor.setBackground(new java.awt.Color(219, 217, 214));
        txtLinkColor.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        txtLinkColor.setForeground(new java.awt.Color(7, 12, 17));
        txtLinkColor.setToolTipText("");
        txtLinkColor.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(72, 69, 67)), javax.swing.BorderFactory.createEmptyBorder(1, 6, 1, 6)));
        txtLinkColor.setMargin(new java.awt.Insets(20, 20, 20, 20));
        panelColorCustom.add(txtLinkColor, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 31, 218, 28));

        jLabel6.setFont(new java.awt.Font("Knowledge Medium", 0, 15)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Link Hover Color");
        panelColorCustom.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 73, -1, -1));

        txtLinkHoverColor.setBackground(new java.awt.Color(219, 217, 214));
        txtLinkHoverColor.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        txtLinkHoverColor.setForeground(new java.awt.Color(7, 12, 17));
        txtLinkHoverColor.setToolTipText("");
        txtLinkHoverColor.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(72, 69, 67)), javax.swing.BorderFactory.createEmptyBorder(1, 6, 1, 6)));
        txtLinkHoverColor.setMargin(new java.awt.Insets(20, 20, 20, 20));
        panelColorCustom.add(txtLinkHoverColor, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 65, 218, 28));

        jLabel7.setFont(new java.awt.Font("Knowledge Medium", 0, 15)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Font Family Name");
        panelColorCustom.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 104, -1, -1));

        txtFontFamily.setBackground(new java.awt.Color(219, 217, 214));
        txtFontFamily.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        txtFontFamily.setForeground(new java.awt.Color(7, 12, 17));
        txtFontFamily.setToolTipText("");
        txtFontFamily.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(72, 69, 67)), javax.swing.BorderFactory.createEmptyBorder(1, 6, 1, 6)));
        txtFontFamily.setMargin(new java.awt.Insets(20, 20, 20, 20));
        panelColorCustom.add(txtFontFamily, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 99, 218, 28));

        jLabel8.setFont(new java.awt.Font("Knowledge Medium", 0, 15)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Box Background Color");
        panelColorCustom.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 138, -1, -1));

        txtButtonBoxDesign.setEditable(false);
        txtButtonBoxDesign.setBackground(new java.awt.Color(219, 217, 214));
        txtButtonBoxDesign.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        txtButtonBoxDesign.setForeground(new java.awt.Color(7, 12, 17));
        txtButtonBoxDesign.setToolTipText("");
        txtButtonBoxDesign.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(72, 69, 67)), javax.swing.BorderFactory.createEmptyBorder(1, 6, 1, 6)));
        txtButtonBoxDesign.setMargin(new java.awt.Insets(20, 20, 20, 20));
        panelColorCustom.add(txtButtonBoxDesign, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 133, 218, 28));

        jLabel5.setFont(new java.awt.Font("Knowledge Medium", 0, 15)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Button Color");
        panelColorCustom.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(436, 39, -1, -1));

        txtButtonColor.setBackground(new java.awt.Color(219, 217, 214));
        txtButtonColor.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        txtButtonColor.setForeground(new java.awt.Color(7, 12, 17));
        txtButtonColor.setToolTipText("");
        txtButtonColor.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(72, 69, 67)), javax.swing.BorderFactory.createEmptyBorder(1, 6, 1, 6)));
        txtButtonColor.setMargin(new java.awt.Insets(20, 20, 20, 20));
        panelColorCustom.add(txtButtonColor, new org.netbeans.lib.awtextra.AbsoluteConstraints(586, 30, 218, 28));

        jLabel9.setFont(new java.awt.Font("Knowledge Medium", 0, 15)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Button Hover Color");
        panelColorCustom.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(436, 73, -1, -1));

        txtButtonHoverColor.setBackground(new java.awt.Color(219, 217, 214));
        txtButtonHoverColor.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        txtButtonHoverColor.setForeground(new java.awt.Color(7, 12, 17));
        txtButtonHoverColor.setToolTipText("");
        txtButtonHoverColor.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(72, 69, 67)), javax.swing.BorderFactory.createEmptyBorder(1, 6, 1, 6)));
        txtButtonHoverColor.setMargin(new java.awt.Insets(20, 20, 20, 20));
        panelColorCustom.add(txtButtonHoverColor, new org.netbeans.lib.awtextra.AbsoluteConstraints(586, 65, 218, 28));

        jLabel10.setFont(new java.awt.Font("Knowledge Medium", 0, 15)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Button Bg Color");
        panelColorCustom.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(436, 104, -1, -1));

        txtButtonBackColor.setBackground(new java.awt.Color(219, 217, 214));
        txtButtonBackColor.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        txtButtonBackColor.setForeground(new java.awt.Color(7, 12, 17));
        txtButtonBackColor.setToolTipText("");
        txtButtonBackColor.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(72, 69, 67)), javax.swing.BorderFactory.createEmptyBorder(1, 6, 1, 6)));
        txtButtonBackColor.setMargin(new java.awt.Insets(20, 20, 20, 20));
        panelColorCustom.add(txtButtonBackColor, new org.netbeans.lib.awtextra.AbsoluteConstraints(586, 99, 218, 28));

        jLabel11.setFont(new java.awt.Font("Knowledge Medium", 0, 15)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Button Bg Hover Color");
        panelColorCustom.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(436, 138, -1, -1));

        txtButtonBackHoverColor.setBackground(new java.awt.Color(219, 217, 214));
        txtButtonBackHoverColor.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        txtButtonBackHoverColor.setForeground(new java.awt.Color(7, 12, 17));
        txtButtonBackHoverColor.setToolTipText("");
        txtButtonBackHoverColor.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(72, 69, 67)), javax.swing.BorderFactory.createEmptyBorder(1, 6, 1, 6)));
        txtButtonBackHoverColor.setMargin(new java.awt.Insets(20, 20, 20, 20));
        panelColorCustom.add(txtButtonBackHoverColor, new org.netbeans.lib.awtextra.AbsoluteConstraints(586, 133, 218, 28));

        containerPanel.add(panelColorCustom, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 227, 822, 190));

        panelProgress.setBackground(new java.awt.Color(125, 117, 109));
        panelProgress.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(142, 132, 122), 3));
        panelProgress.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        progressBar.setBackground(new java.awt.Color(30, 35, 39));
        progressBar.setForeground(new java.awt.Color(221, 133, 20));
        progressBar.setBorderPainted(false);
        panelProgress.add(progressBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 774, 11));

        btnDetails.setFont(new java.awt.Font("Knowledge Medium", 0, 15)); // NOI18N
        btnDetails.setForeground(new java.awt.Color(255, 255, 255));
        btnDetails.setText("Completed");
        btnDetails.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        panelProgress.add(btnDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 42, -1, 20));

        percentageCount.setFont(new java.awt.Font("Knowledge Medium", 0, 15)); // NOI18N
        percentageCount.setForeground(new java.awt.Color(255, 255, 255));
        percentageCount.setText("(0%)");
        panelProgress.add(percentageCount, new org.netbeans.lib.awtextra.AbsoluteConstraints(435, 44, -1, -1));

        containerPanel.add(panelProgress, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 422, 822, 82));

        btnShutDown.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnShutDown.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnShutDownMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnShutDownMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnShutDownMouseExited(evt);
            }
        });
        containerPanel.add(btnShutDown, new org.netbeans.lib.awtextra.AbsoluteConstraints(739, 532, 65, 50));

        iconShutDown.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iconShutDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/shut-down-btn.png"))); // NOI18N
        iconShutDown.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        iconShutDown.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        containerPanel.add(iconShutDown, new org.netbeans.lib.awtextra.AbsoluteConstraints(741, 533, 59, 34));

        labelShutDown.setFont(new java.awt.Font("Knowledge Medium", 0, 13)); // NOI18N
        labelShutDown.setForeground(new java.awt.Color(255, 255, 255));
        labelShutDown.setText("Shut Down");
        containerPanel.add(labelShutDown, new org.netbeans.lib.awtextra.AbsoluteConstraints(741, 570, -1, -1));

        btnDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDeleteMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnDeleteMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnDeleteMouseExited(evt);
            }
        });
        containerPanel.add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 532, 65, 50));

        labelDeleteBlog.setFont(new java.awt.Font("Knowledge Medium", 0, 13)); // NOI18N
        labelDeleteBlog.setForeground(new java.awt.Color(255, 255, 255));
        labelDeleteBlog.setText("Delete Blog");
        containerPanel.add(labelDeleteBlog, new org.netbeans.lib.awtextra.AbsoluteConstraints(599, 570, -1, -1));

        iconDeleteBlog.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iconDeleteBlog.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete-btn.png"))); // NOI18N
        iconDeleteBlog.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        iconDeleteBlog.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        containerPanel.add(iconDeleteBlog, new org.netbeans.lib.awtextra.AbsoluteConstraints(603, 533, 59, 34));

        btnBackup.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBackup.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnBackupMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnBackupMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnBackupMouseExited(evt);
            }
        });
        containerPanel.add(btnBackup, new org.netbeans.lib.awtextra.AbsoluteConstraints(463, 533, 70, 50));

        iconBackupBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iconBackupBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/backup-btn.png"))); // NOI18N
        iconBackupBtn.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        iconBackupBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        containerPanel.add(iconBackupBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(463, 533, 70, 34));

        labelBackup.setFont(new java.awt.Font("Knowledge Medium", 0, 13)); // NOI18N
        labelBackup.setForeground(new java.awt.Color(255, 255, 255));
        labelBackup.setText("Backup Blog");
        containerPanel.add(labelBackup, new org.netbeans.lib.awtextra.AbsoluteConstraints(462, 570, -1, -1));

        btnReset.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnReset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnResetMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnResetMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnResetMouseExited(evt);
            }
        });
        containerPanel.add(btnReset, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 533, 52, 50));

        labelReset.setFont(new java.awt.Font("Knowledge Medium", 0, 13)); // NOI18N
        labelReset.setForeground(new java.awt.Color(255, 255, 255));
        labelReset.setText("Reset All");
        containerPanel.add(labelReset, new org.netbeans.lib.awtextra.AbsoluteConstraints(321, 570, -1, -1));

        iconReset.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iconReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reset-btn.png"))); // NOI18N
        iconReset.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        iconReset.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        containerPanel.add(iconReset, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 533, 52, 34));

        btnStart.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnStart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnStartMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnStartMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnStartMouseExited(evt);
            }
        });
        containerPanel.add(btnStart, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 530, 70, 50));

        labelStart.setFont(new java.awt.Font("Knowledge Medium", 0, 13)); // NOI18N
        labelStart.setForeground(new java.awt.Color(255, 255, 255));
        labelStart.setText("Start Process");
        containerPanel.add(labelStart, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 570, -1, -1));

        iconStart.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iconStart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/start-btn.png"))); // NOI18N
        iconStart.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        iconStart.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        containerPanel.add(iconStart, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 530, 70, 34));

        macButtonBar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/btn-bar.png"))); // NOI18N
        containerPanel.add(macButtonBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(112, 560, -1, -1));

        getContentPane().add(containerPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 978, 650));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //BROWSE BUTTON MOUSE EXIT EVENT
    private void btnBrowseMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBrowseMouseExited
        ImageIcon browseBtn = new ImageIcon(getClass().getResource("/images/browse-btn.png"));
        btnBrowse.setIcon(browseBtn);
    }//GEN-LAST:event_btnBrowseMouseExited

    //BROWSE BUTTON MOUSE ENTER EVENT
    private void btnBrowseMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBrowseMouseEntered
        ImageIcon browseBtn = new ImageIcon(getClass().getResource("/images/browse-btn-hover.png"));
        btnBrowse.setIcon(browseBtn);
    }//GEN-LAST:event_btnBrowseMouseEntered

    //HELP BUTTON MOUSE EXIT EVENT
    private void helpLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpLabelMouseExited
        Color color = Color.decode("#ffffff");
        helpLabelMainMenu.setForeground(color);
    }//GEN-LAST:event_helpLabelMouseExited

    //HELP BUTTON MOUSE ENTER EVENT
    private void helpLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpLabelMouseEntered
        Color hoverColor = Color.decode("#dd8514");
        helpLabelMainMenu.setForeground(hoverColor);
    }//GEN-LAST:event_helpLabelMouseEntered

    //NEW FORM BUTTON MOUSE EXIT EVENT
    private void newFormLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newFormLabelMouseExited
        Color color = Color.decode("#ffffff");
        newLabel.setForeground(color);
        formLabel.setForeground(color);
    }//GEN-LAST:event_newFormLabelMouseExited

    //NEW FORM BUTTON MOUSE ENTER BUTTON
    private void newFormLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newFormLabelMouseEntered
        Color hoverColor = Color.decode("#dd8514");
        newLabel.setForeground(hoverColor);
        formLabel.setForeground(hoverColor);
    }//GEN-LAST:event_newFormLabelMouseEntered

    //FORM HEADER MOUSE PRESSED EVENT
    private void dragFrameMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dragFrameMousePressed
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_dragFrameMousePressed

    //FORM HEADER MOUSE DRAGGED EVENT
    private void dragFrameMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dragFrameMouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x - xMouse, y - yMouse);
    }//GEN-LAST:event_dragFrameMouseDragged

    //EXIT BUTTON MOUSE EXIT EVENT
    private void exitButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitButtonMouseExited
        ImageIcon exitButtonIcon = new ImageIcon(getClass().getResource("/images/close-btn.gif"));
        exitButton.setIcon(exitButtonIcon);
    }//GEN-LAST:event_exitButtonMouseExited

    //EXIT BUTTON MOUSE ENTER EVENT
    private void exitButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitButtonMouseEntered
        ImageIcon exitButtonHover = new ImageIcon(getClass().getResource("/images/close-btn-hover.gif"));
        exitButton.setIcon(exitButtonHover);
    }//GEN-LAST:event_exitButtonMouseEntered

    //EXIT BUTTON MOUSE CLICKED EVENT 
    private void exitButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitButtonMouseClicked
        System.exit(0);
    }//GEN-LAST:event_exitButtonMouseClicked

    //MINIMIZE BUTTON MOUSE EXIT EVENT
    private void minimizeButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeButtonMouseExited
        ImageIcon minButtonIcon = new ImageIcon(getClass().getResource("/images/minimize-btn.gif"));
        minimizeButton.setIcon(minButtonIcon);
    }//GEN-LAST:event_minimizeButtonMouseExited

    //MINIMIZE BUTTON MOUSE ENTER EVENT
    private void minimizeButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeButtonMouseEntered
        ImageIcon minButtonHover = new ImageIcon(getClass().getResource("/images/minimize-btn-hover.gif"));
        minimizeButton.setIcon(minButtonHover);
    }//GEN-LAST:event_minimizeButtonMouseEntered

    //MINIMIZE BUTTON MOUSE CLICKED EVENT
    private void minimizeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeButtonMouseClicked
        setState(ICONIFIED);
    }//GEN-LAST:event_minimizeButtonMouseClicked

    //MAIN NAVIGATION BUTTON MOUSE EXIT EVENT
    private void menuButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuButtonMouseExited
        if(mainNavigarionPanelStatus == 0){
            ImageIcon navButton = new ImageIcon(getClass().getResource("/images/nav-btn.png"));
            menuButton.setIcon(navButton);
        }
    }//GEN-LAST:event_menuButtonMouseExited

    //MAIN NAVIGATION BUTTON MOUSE ENTER EVENT
    private void menuButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuButtonMouseEntered
        ImageIcon navButtonHover = new ImageIcon(getClass().getResource("/images/nav-btn-hover.png"));
        menuButton.setIcon(navButtonHover);
    }//GEN-LAST:event_menuButtonMouseEntered

    //RESET BUTTON MOUSE EXIT EVENT
    private void btnResetMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnResetMouseExited
        ImageIcon resetButton = new ImageIcon(getClass().getResource("/images/reset-btn.png"));
        iconReset.setIcon(resetButton);
        Color color = Color.decode("#ffffff");
        labelReset.setForeground(color);
    }//GEN-LAST:event_btnResetMouseExited

    //RESET BUTTON MOUSE RESET EVENT
    private void btnResetMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnResetMouseEntered
        ImageIcon btnResetHover = new ImageIcon(getClass().getResource("/images/reset-btn-hover.png"));
        iconReset.setIcon(btnResetHover);
        Color color = Color.decode("#dd8514");
        labelReset.setForeground(color);
    }//GEN-LAST:event_btnResetMouseEntered

    //BACKUP BUTTON MOUSE EXIT EVENT
    private void btnBackupMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBackupMouseExited
        ImageIcon backupButton = new ImageIcon(getClass().getResource("/images/backup-btn.png"));
        iconBackupBtn.setIcon(backupButton);
        Color color = Color.decode("#ffffff");
        labelBackup.setForeground(color);
    }//GEN-LAST:event_btnBackupMouseExited

    //BACKUP BUTTON MOUSE ENTER EVENT
    private void btnBackupMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBackupMouseEntered
        ImageIcon btnBackupHover = new ImageIcon(getClass().getResource("/images/backup-btn-hover.png"));
        iconBackupBtn.setIcon(btnBackupHover);
        Color color = Color.decode("#dd8514");
        labelBackup.setForeground(color);
    }//GEN-LAST:event_btnBackupMouseEntered

    //DELETE BUTTON MOUSE EXIT EVENT
    private void btnDeleteMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteMouseExited
        ImageIcon DeleteBlogBtn = new ImageIcon(getClass().getResource("/images/delete-btn.png"));
        iconDeleteBlog.setIcon(DeleteBlogBtn);
        Color color = Color.decode("#ffffff");
        labelDeleteBlog.setForeground(color);
    }//GEN-LAST:event_btnDeleteMouseExited

    //DELETE BUTTON MOUSE ENTER EVENT
    private void btnDeleteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteMouseEntered
        ImageIcon btnDeleteBlogHover = new ImageIcon(getClass().getResource("/images/delete-btn-hover.png"));
        iconDeleteBlog.setIcon(btnDeleteBlogHover);
        Color color = Color.decode("#dd8514");
        labelDeleteBlog.setForeground(color);
    }//GEN-LAST:event_btnDeleteMouseEntered

    //SHUT DOWN BUTTON MOUSE EXIT EVENT
    private void btnShutDownMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnShutDownMouseExited
        ImageIcon shutDownBtn = new ImageIcon(getClass().getResource("/images/shut-down-btn.png"));
        iconShutDown.setIcon(shutDownBtn);
        Color color = Color.decode("#ffffff");
        labelShutDown.setForeground(color);
    }//GEN-LAST:event_btnShutDownMouseExited

    //SHUT DOWN BUTTON MOUSE ENTER EVENT
    private void btnShutDownMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnShutDownMouseEntered
        ImageIcon shutDownBtnHover = new ImageIcon(getClass().getResource("/images/shut-down-btn-hover.png"));
        iconShutDown.setIcon(shutDownBtnHover);
        Color color = Color.decode("#dd8514");
        labelShutDown.setForeground(color);
    }//GEN-LAST:event_btnShutDownMouseEntered

    //START BUTTON MOUSE EXIT EVENT
    private void btnStartMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnStartMouseExited
        ImageIcon startButton = new ImageIcon(getClass().getResource("/images/start-btn.png"));
        iconStart.setIcon(startButton);
        Color color = Color.decode("#ffffff");
        labelStart.setForeground(color);
    }//GEN-LAST:event_btnStartMouseExited

    //START BUTTON MOUSE ENTER EVENT
    private void btnStartMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnStartMouseEntered
        ImageIcon btnStartHover = new ImageIcon(getClass().getResource("/images/start-btn-hover.png"));
        iconStart.setIcon(btnStartHover);
        Color color = Color.decode("#dd8514");
        labelStart.setForeground(color);
    }//GEN-LAST:event_btnStartMouseEntered

    //RESULT STATUS PANEL COMES IN
    private void resultStatusFadeIn(){
        new Thread() {
            @Override
            @SuppressWarnings("SleepWhileInLoop")
            public void run() {
                processStatusPanelStatus = 1;

                try {
                    for(int i=979; i>=729; i--){
                        processStatusPanel.setLocation(i, 46);
                        Thread.sleep(1);
                    }
                } catch (Exception e) {
                }
            }
        }.start();
    }
    
    //RESULT STATUS PANEL GOES OUT
    private void resultStatusFadeOut(){
        new Thread() {
            @Override
            @SuppressWarnings("SleepWhileInLoop")
            public void run() {
                processStatusPanelStatus = 0;
                ImageIcon detailsButtonHover = new ImageIcon(getClass().getResource("/images/btnDetails.png"));
                btnDetails.setIcon(detailsButtonHover);
                try {
                    for(int i=729; i<=979; i++){
                        processStatusPanel.setLocation(i, 46);
                        Thread.sleep(1);
                    }
                } catch (Exception e) {
                }
            }
        }.start();
    }
    
    //PROCESS STATUS PANEL FADE IN EFFECT
    private void processStatusFadeIn(){
        new Thread() {
            @Override
            @SuppressWarnings("SleepWhileInLoop")
            public void run() {
                
                try {
                    Thread.sleep(1000);
                    for(int i=979; i>=719; i--){
                        processStatusPanel.setLocation(i, 46);
                        Thread.sleep(1);
                    }
                } catch (Exception e) {
                }
            }
        }.start();
    }
    
    //PROCESS STATUS PANEL FADE OUT EFFECT
    private void processStatusFadeOut(){
        new Thread() {
            @Override
            @SuppressWarnings("SleepWhileInLoop")
            public void run() {
                try {
                    Thread.sleep(3000);
                    for(int i=719; i<=979; i++){
                        processStatusPanel.setLocation(i, 46);
                        Thread.sleep(1);
                    }
                } catch (Exception e) {
                }
            }
        }.start();
    }
    
    //MAIN NAVIGATION PANEL GOES OUT
    private void mainNavPanelFadeOut(){
        new Thread() {
            @Override
            @SuppressWarnings("SleepWhileInLoop")
            public void run() {
                mainNavigarionPanelStatus = 0;
                ImageIcon navButton = new ImageIcon(getClass().getResource("/images/nav-btn.png"));
                menuButton.setIcon(navButton);
                try {
                    for(int i=0; i>=-54; i--){
                        mainNavigationPanel.setLocation(i, 46);
                        Thread.sleep(3);
                    }
                } catch (Exception e) {
                }
            }
        }.start();
    }
    
    //BROWSE BUTTON CLICK EVENT
    private void btnBrowseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBrowseMouseClicked
        fileChooser();
    }//GEN-LAST:event_btnBrowseMouseClicked

    //RESET BUTTONC CLICK EVENT
    private void btnResetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnResetMouseClicked
        if(mainNavigarionPanelStatus == 1)mainNavPanelFadeOut();
        txtFolderName.setText(null);
        txtLinkColor.setText(null);
        txtLinkHoverColor.setText(null);
        txtFontFamily.setText(null);
        txtButtonBoxDesign.setText(null);
        txtButtonColor.setText(null);
        txtButtonHoverColor.setText(null);
        txtButtonBackColor.setText(null);
        txtButtonBackHoverColor.setText(null);
        chckbxMobileSearch.setSelected(false);
        chckbxCssCopy.setSelected(false);
        chckbxBoxDesign.setSelected(false);
        txtareaResult.setText(null);
        progressBar.setValue(0);
        percentageCount.setText("(0%)");
    }//GEN-LAST:event_btnResetMouseClicked

    private void btnShutDownMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnShutDownMouseClicked
        System.exit(0);
    }//GEN-LAST:event_btnShutDownMouseClicked

    private void btnStartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnStartMouseClicked
        if(mainNavigarionPanelStatus == 1)mainNavPanelFadeOut();
        txtareaResult.setText("");
        btnStart.setEnabled(false);
        startProcessTask = new startProcessProgress();
        startProcessTask.execute();
    }//GEN-LAST:event_btnStartMouseClicked

    private void btnBackupMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBackupMouseClicked
        if(mainNavigarionPanelStatus == 1)mainNavPanelFadeOut();
        txtareaResult.setText("");
        btnBackup.setEnabled(false);
        backupTask = new backupProgress();
        backupTask.execute();
    }//GEN-LAST:event_btnBackupMouseClicked

    private void btnDeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteMouseClicked
        if(mainNavigarionPanelStatus == 1)mainNavPanelFadeOut();
        txtareaResult.setText("");
        btnDelete.setEnabled(false);
        deleteTask = new deleteProgress();
        deleteTask.execute();
    }//GEN-LAST:event_btnDeleteMouseClicked

    private void menuButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuButtonMouseClicked
        
        switch(mainNavigarionPanelStatus){
            case 1:
            new Thread() {
                @Override
                @SuppressWarnings("SleepWhileInLoop")
                public void run() {
                    mainNavigarionPanelStatus = 0;
                    ImageIcon navButton = new ImageIcon(getClass().getResource("/images/nav-btn.png"));
                    menuButton.setIcon(navButton);
                    try {
                        for(int i=0; i>=-54; i--){
                            mainNavigationPanel.setLocation(i, 46);
                            Thread.sleep(3);
                        }
                    } catch (Exception e) {
                    }
                }
            }.start();
            break;
            
            case 0:
                new Thread() {
                @Override
                @SuppressWarnings("SleepWhileInLoop")
                public void run() {
                    mainNavigarionPanelStatus = 1;

                    try {
                        for(int i=-54; i<=0; i++){
                            mainNavigationPanel.setLocation(i, 46);
                            Thread.sleep(3);
                        }
                    } catch (Exception e) {
                    }
                }
            }.start();
            break;
        }
    }//GEN-LAST:event_menuButtonMouseClicked

    private void newFormLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newFormLabelMouseClicked
        dispose();
        new findlawblog.MainFrame().setVisible(true);
    }//GEN-LAST:event_newFormLabelMouseClicked

    private void chckbxBoxDesignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chckbxBoxDesignActionPerformed
       if(chckbxBoxDesign.isSelected()){
            txtButtonBoxDesign.setEditable(true);
        }
        else{
            txtButtonBoxDesign.setEditable(false);
        }
    }//GEN-LAST:event_chckbxBoxDesignActionPerformed

    private void helpLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpLabelMouseClicked
        try{
            String url = "https://www.google.com";
            java.awt.Desktop.getDesktop().browse(java.net.URI.create(url));
        }catch(Exception e){
            
        }
    }//GEN-LAST:event_helpLabelMouseClicked

    //CHOOSE FOLDER FUNCTION
    private void fileChooser(){
        chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("c:\\"));
        chooser.setDialogTitle("Choose Your Folder");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) 
        {
            txtFolderName.setText(chooser.getSelectedFile().toString());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel btnBackup;
    private javax.swing.JLabel btnBrowse;
    private javax.swing.JLabel btnDelete;
    private javax.swing.JLabel btnDetails;
    private javax.swing.JLabel btnReset;
    private javax.swing.JLabel btnShutDown;
    private javax.swing.JLabel btnStart;
    private javax.swing.JCheckBox chckbxBoxDesign;
    private javax.swing.JCheckBox chckbxCssCopy;
    private javax.swing.JCheckBox chckbxMobileSearch;
    private javax.swing.JPanel containerPanel;
    private javax.swing.JLabel divider;
    private javax.swing.JLabel dragFrame;
    private javax.swing.JLabel exitButton;
    private javax.swing.JLabel footerBrand;
    private javax.swing.JLabel formLabel;
    private javax.swing.JLabel helpLabel;
    private javax.swing.JLabel helpLabelMainMenu;
    private javax.swing.JLabel horizontalDivider;
    private javax.swing.JLabel horizontalDivider1;
    private javax.swing.JLabel iconBackupBtn;
    private javax.swing.JLabel iconDeleteBlog;
    private javax.swing.JLabel iconReset;
    private javax.swing.JLabel iconShutDown;
    private javax.swing.JLabel iconStart;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel labelBackup;
    private javax.swing.JLabel labelBlog;
    private javax.swing.JLabel labelDeleteBlog;
    private javax.swing.JLabel labelNote;
    private javax.swing.JLabel labelNoteSecond;
    private javax.swing.JLabel labelNoteThird;
    private javax.swing.JLabel labelReset;
    private javax.swing.JLabel labelShutDown;
    private javax.swing.JLabel labelStart;
    private javax.swing.JLabel labelTool;
    private javax.swing.JLabel logo;
    private javax.swing.JLabel macButtonBar;
    private javax.swing.JPanel mainNavigationPanel;
    private javax.swing.JLabel menuButton;
    private javax.swing.JLabel minimizeButton;
    private javax.swing.JLabel newFormLabel;
    private javax.swing.JLabel newLabel;
    private javax.swing.JLabel noteDivider;
    private javax.swing.JPanel panelBrowse;
    private javax.swing.JPanel panelCheckBox;
    private javax.swing.JPanel panelColorCustom;
    private javax.swing.JPanel panelFooter;
    private javax.swing.JPanel panelHeader;
    private javax.swing.JPanel panelHeaderBorder;
    private javax.swing.JPanel panelProgress;
    private javax.swing.JLabel percentageCount;
    private javax.swing.JPanel processStatusPanel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTextField txtButtonBackColor;
    private javax.swing.JTextField txtButtonBackHoverColor;
    private javax.swing.JTextField txtButtonBoxDesign;
    private javax.swing.JTextField txtButtonColor;
    private javax.swing.JTextField txtButtonHoverColor;
    private javax.swing.JTextField txtFolderName;
    private javax.swing.JTextField txtFontFamily;
    private javax.swing.JTextField txtLinkColor;
    private javax.swing.JTextField txtLinkHoverColor;
    private javax.swing.JTextArea txtareaResult;
    // End of variables declaration//GEN-END:variables
    private int mainNavigarionPanelStatus = 0;
    private int processStatusPanelStatus = 0;
    private JFileChooser chooser;
    
    private startProcessProgress startProcessTask;
    private backupProgress backupTask;
    private deleteProgress deleteTask;
    
    //INSTANCE VARIABLES DECLARED
    public String folderName;
    public String folderBrowse;
    public String targetFolderPath;
    public String folderChar;
    public boolean folderResult;
    public String blogFolderName;
    public String blogFileName;
    public String cssFileName;
    public String scriptFileName;
    public String defaultFileName;
    public boolean firstHeaderModule;
    public boolean secondHeaderModule;
    public String replaceText;
    public String replaceWith;
    public String lineToBeReplaced;
    public boolean blogModule;
    public String shortFormModule;
    public String mtModule;
    public String contactModule;
    public String finalContentMain;
    public String defaultCopy;
    public String cssCopy;
    public String shortFormNewStatus;
    
    //JSOUP INSTANCE VARIABLES
    Document htmlFile;
    
    //STATUS INSTANCE VARIABLES
    public boolean shortFormStatus = false;
    public boolean contactModuleStatus = false;
    public boolean columnMainStatus = false;
    public boolean searchFormStatus = false;
    public boolean columnSideStatus = false;
    public boolean mobileSearchStatus = false;
    
    //CONSTANTS PRE DECLARED VALUES
    public String sourceBlogCSS = "C:\\Program Files\\BlogApp\\dist\\lib\\css\\blogCSS.scss";
    public String sourceBlogNormalCSS = "C:\\Program Files\\BlogApp\\dist\\lib\\css\\blogBoxCSS.scss";
    public String sourceBlogSearchCSS = "C:\\Program Files\\BlogApp\\dist\\lib\\css\\blogSearchCSS.scss";
    public String sourceBlogShortCSS = "C:\\Program Files\\BlogApp\\dist\\lib\\css\\blogShortCSS.scss";
    public String sourceColumnSideCSS = "C:\\Program Files\\BlogApp\\dist\\lib\\css\\blogColumnSideCSS.scss";
    public String sourceBlogComments = "C:\\Program Files\\BlogApp\\dist\\lib\\css\\blogComments.scss";
    public String sourceTemplate = "C:\\Program Files\\BlogApp\\dist\\lib\\css\\templateBlog.html";
    public String sourceMobileSearch = "C:\\Program Files\\BlogApp\\dist\\lib\\css\\searchMobile.scss";
    
    public String ifStartingPoint = "<#if";
    public String ifEndingPoint = "</#if>";
    public String switchStartingPoint = "<#switch";
    public String switchEndingPoint = "</#switch>";
    public String ifUsefulStartPoint = "<#if";
    public String ifUsefulEndPoint = ">";
    public String brandAlt = "${site.data.firmName}${SEMFirmNameAlt}";
    public String blogBrandAlt = "<mt:FLFirmName remove_html=\"1\" encode_html=\"1\" strip_linefeeds=\"1\" trim=\"1\"/>";
    public String assignStartingPoint = "<#assign";
    public String assignEndingPoint = "SEMFirmNameAlt}\">";
    public String includeStartingPoint = "<#include";
    public String includeEndingPoint = "pageAttributes.ftl\">";
    public String atomCode = "/atom.xml\">";
    public String atomNewCode = "/</mt:if>atom.xml\">";
    public String mapAndDirection = "if (navigator.platform.indexOf(\"iPhone\") != -1 || navigator.platform.indexOf(\"iPad\") != -1) { if($(\".office-static-map a\").length==0){ flMaps.loadMap({\"latitude\": tanishLatitude, \"longitude\": tanishLongitude}); } }";
    public String shortFormScript = "<script>$('#intakeFormShortAutofillSubmit').prop(\"type\",\"submit\"); $('#intakeFormShortAutofillSubmit').attr(\"value\",\"Contact Us\"); $('#intakeFormShortAutofillSubmit').removeClass(\"over\"); $('#intakeFormShortAutofillSubmit').removeAttr(\"src\");</script>";
    
    public String searchFull = "<div id=\"containerSearchFormDesign\">" + "\r\n" + "<script type=\"text/javascript\" src=\"http://video-transcripts.findlaw.com/includes/searchFormDesignCheck.js\"> </script>" + "\r\n" + "<script type=\"text/javascript\" src=\"http://video-transcripts.findlaw.com/includes/autofillFSP.js\"> </script>" + "\r\n" + "<form action=\"/Search-Results.shtml\" method=\"get\" class=\"formAutoFill\" name=\"searchFormDesign\" id=\"searchFormDesign\">" + "\r\n" + "<label for=\"searchFormDesignSearchTerms\">Search</label>" + "\r\n" + "<input name=\"stext\" type=\"text\" id=\"searchFormDesignSearchTerms\" title=\"Search our site\"/>" + "\r\n" + "<input type=\"submit\" id=\"searchFormDesignSubmit\" name=\"searchFormDesignSubmit\" value=\"Search\" />" + "\r\n" + "</form>" + "\r\n" + "</div>";
    
    public String headerFirstModule = "\r\n<mt:var name=\"hideDisclaimer\" value=\"true\"/>";
    public String headerSecondModule = "\r\n<mt:include module=\"fl2-module-head-code\"/>";
    public String bodyMtModule = "\r\n\t\t<mt:include module=\"fl2-module-body-code\">\n";
    public String comments = "<!--[if lt IE 9]>";
    public String blogBodyModule = "<body class=\"design blog\" <mt:var name=\"bodyAttributes\">";
    public String blogFinePrint = "<mt:include module=\"fl2-module-fine-print\">";
    public String blogShortForm = "<div class=\"short-form\">" + "\r\n" + "<h4 class=\"title-short-form\">Contact The Office</h4>" + "\r\n" + "<!--#include virtual=\"/modules/Short-Form.html\" -->\n" + "\r\n" + "</div>";
    public String blogContentMain = "<h1 class=\"page-title\">" + "\r\n" + "<mt:var name=\"pageTitle\"/></h1>" + "\r\n" + "<section class=\"content\">" + "\r\n" + "<mt:var name=\"contents\"/>" + "\r\n" + "</section>";
    public String headingModule = "<mt:var name=\"pageTitle\"/>";
    public String contentModule = "<mt:var name=\"contents\"/>";
    public String blogColumnSide = "<div id=\"navigationBlog\" class=\"navigation-blog\"><!--#include virtual=\"/blog/blogModules/navigationBlog.html\" --></div>" + "\n\r" + "<a target=\"_blank\" id=\"subscribe\" class=\"subscribe\" href=\"<mt:blogRelativeURL/><mt:if tag=\"FLBlogType\" eq=\"slash\">/</mt:if>atom.xml\">Subscribe To This Blog's Feed</a>" + "\n\r" + "<a href=\"http://legalblogs.findlaw.com/\" rel=\"nofollow\" id=\"findlawNetwork\" class=\"findlaw-network\" target=\"_blank\"><img alt=\"FindLaw Network\" src=\"http://video-transcripts.findlaw.com/includes/findlaw-blog-network.gif\"/></a>";
    public String SearchMtModule = "<mt:include module=\"fl2-module-search-autofill\"/>" + "\r\n";
    public String fullColumnSide = "<div class=\"column-side\" role=\"complementary\">" + "\r\n" + "<mt:include module=\"fl2-module-search-autofill\"/>" + "\n\r" + "<div id=\"navigationBlog\" class=\"navigation-blog\"><!--#include virtual=\"/blog/blogModules/navigationBlog.html\" --></div>" + "\n\r" + "<a target=\"_blank\" id=\"subscribe\" class=\"subscribe\" href=\"<mt:blogRelativeURL/><mt:if tag=\"FLBlogType\" eq=\"slash\">/</mt:if>atom.xml\">Subscribe To This Blog's Feed</a>"  + "\r\n" + "<a href=\"http://legalblogs.findlaw.com/\" rel=\"nofollow\" id=\"findlawNetwork\" class=\"findlaw-network\" target=\"_blank\"><img alt=\"FindLaw Network\" src=\"http://video-transcripts.findlaw.com/includes/findlaw-blog-network.gif\"/></a>" + "\n\r" + "</div>";
    
    
    
    //START PROCESS CLASS WITH SWING WORKER
    class startProcessProgress extends SwingWorker<Void, Void>{
        public startProcessProgress() {
        }
        @Override
        protected Void doInBackground() throws Exception {
            processStatus(0);
            checkBlogFolderExistance();
            processStatus(100);
            btnStart.setEnabled(true);
            
            processStatusFadeIn();
            processStatusFadeOut();
            
            return null;
        }
    }
    
    //BUILDING FODER FULL PATH
    private boolean buildTargetFolderPath(String name, String folderChar){
        targetFolderPath = "s:\\"+folderChar+"\\"+name+"\\";
        File folder = new File(targetFolderPath);
        return folder.isDirectory();
    }
    
    //BUILDING BROWSE FOLDER PATH
    private boolean buildTargetFolderPath(String browseFolderPath){
        targetFolderPath = browseFolderPath;
        File folder = new File(targetFolderPath);
        return folder.isDirectory();
    }
    
    //Process Delay Method
    private void processStatus(int count){
        if(count == 0){
            progressBar.setValue(count);
        }
        else{
            for(int i = progressBar.getValue(); i<=count; i++){
                progressBar.setValue(i);
                percentageCount.setText("("+i+"%)");
                try{
                    Thread.sleep(1);
                }catch(InterruptedException ex){}
            }
        }
    }
    
    //CHECK FOR BLOG FODER EXISTANCE
    private void checkBlogFolderExistance(){
        
        folderName = "";
        folderBrowse = "";
        if(txtFolderName.getText().contains(":") == true){
            folderBrowse = txtFolderName.getText();
        }
        else{
            folderName = txtFolderName.getText();
        }
        
        processStatus(5);
        
        if(folderName.length() != 0){
            folderChar = String.valueOf(folderName.charAt(0));
            folderResult = buildTargetFolderPath(folderName, folderChar);
            if(folderResult == true){
                txtareaResult.setForeground(new Color(0, 128, 128));
                txtareaResult.append("SUCCESS: Folder path is valid.\n");

                //CALLING FOLDER CREATION METHOD
                createBlogFolder(targetFolderPath);
            }
            else{
                txtareaResult.setForeground(new Color(210, 35, 35));
                txtareaResult.append("ERROR: Folder path is not valid.\n");
            }
        }
        else if(folderBrowse.length() != 0){
            folderResult = buildTargetFolderPath(folderBrowse);
            if(folderResult == true){
                txtareaResult.setForeground(new Color(0, 128, 128));
                txtareaResult.append("SUCCESS: Folder path is valid.\n");

                //CREATE BLOG FOLDER
                createBlogFolder(targetFolderPath);

            }
            else{
                txtareaResult.setForeground(new Color(210, 35, 35));
                txtareaResult.append("ERROR: Folder path is not valid.\n");
            }
        }
        else{
            txtareaResult.setForeground(new Color(210, 35, 35));
            txtareaResult.append("ERROR: Please provide any folder name.\n");
        }
    }
    
    //CREATE TEMPLATE BLOG FOLDER
    private void createBlogFolder(String path){
        blogFolderName = path+"\\design\\templates-blog";
        File blogDir = new File(blogFolderName);
        if(blogDir.exists()){
            txtareaResult.setForeground(new Color(210, 35, 35));
            txtareaResult.append("ERROR: Blog folder already exists.\n");
        }
        else{
            boolean b = blogDir.mkdir();
            if(b == true){
                txtareaResult.setForeground(new Color(0, 128, 128));
                txtareaResult.append("SUCCESS: Blog folder has been created.\n");
                try {
                    createBlogFile(blogFolderName);
                } catch (IOException ex) {
                    txtareaResult.setForeground(new Color(210, 35, 35));
                    txtareaResult.append("ERROR: Blog folder has not been created.\n");
                }
            }
            else{
                txtareaResult.setForeground(new Color(210, 35, 35));
                txtareaResult.append("ERROR: Blog folder has not been created.\n");
            }
        }
    }
    
    //CREATE BLOG DESIGN FILE
    private void createBlogFile(String path) throws IOException{
        blogFileName = path+"\\design.html";
        defaultFileName = targetFolderPath + "\\design\\templates\\default.html";
        cssFileName = targetFolderPath + "\\design\\css\\site.scss";
        scriptFileName = targetFolderPath + "\\design\\scripts\\init.js";
        File blogFile = new File(blogFileName);
        if(blogFile.exists()){
            txtareaResult.setForeground(new Color(210, 35, 35));
            txtareaResult.setText("ERROR: Blog file already exists.");
        }
        else{
            boolean b = blogFile.createNewFile();
            if(b == true){
                
                txtareaResult.setForeground(new Color(0, 128, 128));
                txtareaResult.append("SUCCESS: Blog file for SASS site created.\n");
                processStatus(10);
                readDefaultFile(defaultFileName);
                processStatus(13);
                removeUnWanted(assignStartingPoint, assignEndingPoint);
                processStatus(16);
                removeUnWanted(includeStartingPoint, includeEndingPoint);
                processStatus(19);
                removeUnWantedIf(ifStartingPoint, ifEndingPoint);
                processStatus(22);
                removeUnWantedSwitch(switchStartingPoint,switchEndingPoint);
                processStatus(25);
                removeLandingPageSctipt();
                processStatus(27);
                removeGoogleAnalyticsCode();
                processStatus(30);
                removeBodyAttributes();
                processStatus(33);
                removeBreadcrumb();
                processStatus(37);
                replaceColumnMain();
                processStatus(40);
                removeSiloNav();
                processStatus(43);
                updateColumnSide();
                processStatus(46);
                updateSearchForm();
                processStatus(49);
                convertGeographical();
                processStatus(53);
                convertShortForm();
                processStatus(57);
                convertContactModule();
                processStatus(59);
                convertFinePrint();
                processStatus(62);
                convertBodyToMt();
                processStatus(65);
                checkHeaders();
                processStatus(68);
                covertEncodedWords();
                processStatus(73);
                recheckFspModule();
                processStatus(77);
                checkBadCode();
                processStatus(80);
                copyFiles();

                writeFile(blogFileName, defaultCopy);
                processStatus(84);
                indentHtml(blogFileName);
                processStatus(88);
                writeFile(blogFileName, defaultCopy);
                processStatus(90);
                if(chckbxCssCopy.isSelected() == false){
                    removeBlogCssComment(cssFileName);
                    processStatus(93);
                    copyCssCode();
                    processStatus(96);
                    updateCssData();
                    processStatus(100);
                }
                else{
                    processStatus(100);
                    txtareaResult.setForeground(new Color(0, 128, 128));
                    txtareaResult.append("SUCCESS: Blog file created and css copied.\n");
                }
            }
            else{
                processStatus(100);
                txtareaResult.setForeground(new Color(210, 35, 35));
                txtareaResult.append("ERROR: Blog file not created.\n");
            }
        }
    }
    
     //READ BLOG FILE LINE BY LINE
    private void readDefaultFile(String defaultFile){
        try {
            File file = new File(defaultFile);
            StringBuilder stringBuffer;
            try (FileReader fileReader = new FileReader(file)) {
                BufferedReader bufferedReader = new BufferedReader(fileReader);
                stringBuffer = new StringBuilder();
                String line;
                
                firstHeaderModule = false;
                secondHeaderModule = false;
                blogModule = false;
                defaultCopy = "";
                
                while ((line = bufferedReader.readLine()) != null) {
                    stringBuffer.append(line);
                    stringBuffer.append("\n");
                }
                defaultCopy = stringBuffer.toString();
                txtareaResult.setForeground(new Color(0, 128, 128));
                txtareaResult.append("SUCCESS: Reading default file code.\n");
            }
        } 
        catch (IOException e) {
            txtareaResult.setForeground(new Color(210, 35, 35));
            txtareaResult.append("ERROR: Blog file is not accessible.\n");
        }
    }
    
    //REINDENT HTML FILE FOR BETTER LOOK
    private void indentHtml(String fileName){
        try {
            File file = new File(fileName);
            try (FileReader fileReader = new FileReader(file)) {
                BufferedReader bufferedReader = new BufferedReader(fileReader);
                String line;
                
                firstHeaderModule = false;
                secondHeaderModule = false;
                blogModule = false;
                defaultCopy = "";
                
                while ((line = bufferedReader.readLine()) != null) {
                    int countWhiteSpace = 0;
                    for(int i = 0; i < line.length(); i++) {
                        if(Character.isWhitespace(line.charAt(i))) {
                          countWhiteSpace++;
                        }
                        else{
                            break;
                        }
                    }
                    countWhiteSpace = countWhiteSpace * 4;
                    line = line.trim();
                    for(int j = 1; j <= countWhiteSpace; j++){
                        line = " " + line;
                    }
                    
                    defaultCopy = (defaultCopy + line + "\n");
                }
            }
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("SUCCESS: HTML code has been indented properly.\n");
        } 
        catch (IOException e) {
            txtareaResult.setForeground(new Color(210, 35, 35));
            txtareaResult.append("ERROR: Blog file is not accessible.\n");
        }
    }
    
    //REMOVE BREADCRUMB CODE FROM BLOG
    private void removeBreadcrumb(){
        if(defaultCopy.contains("bread")){
            htmlFile = Jsoup.parse(defaultCopy);
            htmlFile.select("div[class~=bread.*]").first().remove();
            defaultCopy = htmlFile.toString();
            
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("SUCCESS: Breadcrumb has been removed.\n");
        }
        else if(defaultCopy.contains("navigationBreadCrumbs")){
            htmlFile = Jsoup.parse(defaultCopy);
            htmlFile.select(".navigationBreadCrumbs").first().remove();
            defaultCopy = htmlFile.toString();
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("SUCCESS: Breadcrumb has been removed.\n");
        }
        else{
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("WARNING: Breadcrumb is not available.\n");
        }
    }
    
    //REMOVE UNWANTED CODE FROM BODY
    private void checkBadCode(){
        //REMOVING ROBOTS AND SITE VERIFICATION CODE
        htmlFile = Jsoup.parse(defaultCopy);
        if(defaultCopy.contains("google-site-verification") == true){
            Element gVerification = htmlFile.select("meta[name=google-site-verification]").first();
            defaultCopy = defaultCopy.replaceAll((gVerification.toString()),"");
        }
        
        if(defaultCopy.contains("robots") == true){
            Element robots = htmlFile.select("meta[name=robots]").first();
            defaultCopy = defaultCopy.replaceAll((robots.toString()),"");
        }
        
        if(defaultCopy.contains("&gt;") == true){
            defaultCopy = defaultCopy.replaceAll("&gt;","");
        }
        
        if(defaultCopy.contains("flblogtype") == true){
            defaultCopy = defaultCopy.replace("tag=\" flblogtype", "tag=\"flblogtype");
        }
        
        if(defaultCopy.contains("bodyAttributes\">")){
            defaultCopy = defaultCopy.replaceAll("bodyAttributes\">", "bodyAttributes\">>");   
        }
        
        if(defaultCopy.contains(atomCode)){
            defaultCopy = defaultCopy.replace(atomCode, atomNewCode);
        }
        
        if(defaultCopy.contains(brandAlt)){
            defaultCopy = defaultCopy.replace(brandAlt, blogBrandAlt);
        }
        
        if(defaultCopy.contains("footerBodyMtModule")){
            defaultCopy = defaultCopy.replace("footerBodyMtModule", bodyMtModule);
        }
        
        txtareaResult.setForeground(new Color(0, 128, 128));
        txtareaResult.append("SUCCESS: Bad code has been removed.\n");
        
    }
    
    //REMOVE SOME CODES NOT REQUIRED
    private void removeUnWanted(String stringFrom, String stringTo){
        if(defaultCopy.contains(stringFrom) && defaultCopy.contains(stringTo)){
            int lastIndex = 0;
            int count = 0;
            while(lastIndex != -1){
                lastIndex = defaultCopy.indexOf(stringFrom,lastIndex);
                if(lastIndex != -1){
                    count ++;
                    lastIndex += stringFrom.length();
                }
            }
            for(int i=1; i<=count; i++)
            {
                if(defaultCopy.contains(stringFrom) && defaultCopy.contains(stringTo)){
                    String outcome;
                    outcome = getBetweenStrings(defaultCopy, stringFrom, stringTo);
                    outcome = stringFrom + outcome + stringTo;
                    defaultCopy = defaultCopy.replace(outcome,"");
                }
            }
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("SUCCESS: Removing unwanted codes.\n");
        }
    }
    
    //REMOVE SOME UNWANTED IF FREE MARKER CODES NOT REQUIRED
    private void removeUnWantedIf(String stringFrom, String stringTo){
        if(defaultCopy.contains(stringFrom) && defaultCopy.contains(stringTo)){
            int lastIndex = 0;
            int count = 0;
            while(lastIndex != -1){
                lastIndex = defaultCopy.indexOf(stringFrom,lastIndex);
                if(lastIndex != -1){
                    count ++;
                    lastIndex += stringFrom.length();
                }
            }
            for(int i=1; i<=count; i++)
            {
                if(defaultCopy.contains(stringFrom) && defaultCopy.contains(stringTo)){
                    String outcome = "";
                    outcome = getBetweenStrings(defaultCopy, stringFrom, stringTo);
                    outcome = stringFrom + outcome + stringTo;
                    
                    if(outcome.contains("<#else>") == true){
                        defaultCopy = defaultCopy.replace("<#else>","</#if><#else>");
                    }
                    else if((outcome.contains("!=")==true) && (outcome.contains("!= \"\"")==false) && (outcome.contains("&&")==false) && (outcome.contains("||")==false)){
                        String newOutcome = "";
                        newOutcome = getBetweenStrings(outcome, ifUsefulStartPoint, ifUsefulEndPoint);
                        newOutcome = ifUsefulStartPoint + newOutcome + ifUsefulEndPoint;
                        defaultCopy = defaultCopy.replace(newOutcome,"");
                    }
                    else{
                        defaultCopy = defaultCopy.replace(outcome,"");
                    }
                }
            }
            defaultCopy = defaultCopy.replaceAll("<#else>","");
            defaultCopy = defaultCopy.replaceAll("</#if>","");
            
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("SUCCESS: Free marker code has been removed.\n");
        }
    }
    
    //REMOVE SOME UNWANTED IF FREE MARKER CODES NOT REQUIRED
    private void removeUnWantedSwitch(String stringFrom, String stringTo){
        if(defaultCopy.contains(stringFrom) && defaultCopy.contains(stringTo)){
            int lastIndex = 0;
            int count = 0;
            while(lastIndex != -1){
                lastIndex = defaultCopy.indexOf(stringFrom,lastIndex);
                if(lastIndex != -1){
                    count ++;
                    lastIndex += stringFrom.length();
                }
            }
            for(int i=1; i<=count; i++)
            {
                if(defaultCopy.contains(stringFrom) && defaultCopy.contains(stringTo)){
                    String outcome = "";
                    outcome = getBetweenStrings(defaultCopy, stringFrom, stringTo);
                    outcome = stringFrom + outcome + stringTo;
                    defaultCopy = defaultCopy.replace(outcome,"");
                }
            }
            
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("SUCCESS: Switch Free marker code has been removed.\n");
        }
    }
    
    //GETTING STRING IN BETWEEN
    public String getBetweenStrings(String text, String textFrom, String textTo) {
        String result;
        result = text.substring(text.indexOf(textFrom) + textFrom.length(), text.length());
        result = result.substring(0,result.indexOf(textTo));
        return result;
    }
    
    //CHECK HEADER AND COPY MT CODE
    private void checkHeaders(){
        //SECOND MT MODULE REPLACEMENT
        if(defaultCopy.contains("fl2-module-head-code") == false){
            htmlFile = Jsoup.parse(defaultCopy);
            htmlFile.head().select("script").after(headerSecondModule);
            
            defaultCopy = htmlFile.toString();
            
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("SUCCESS: Copying header MT code.\n");
        }
        else{
            txtareaResult.setForeground(new Color(210, 35, 35));
            txtareaResult.append("ERROR: Second MT Code already exists.\n");
        }
        
        //FIRST MT MODULE REPLACEMENT
        if(defaultCopy.contains("hideDisclaimer") == false){
            String newHeader = "<!DOCTYPE html>\n" + headerFirstModule;
            defaultCopy = defaultCopy.replace("<!doctype html>",newHeader);
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("SUCCESS: Rechecking header MT code.\n");
        }
        else{
            txtareaResult.setForeground(new Color(210, 35, 35));
            txtareaResult.append("ERROR: First MT Code already exists.\n");
        }
    }
    
    //REMOVE ALL BODY ATTRIBUTES AND SET MT ATTRIBUTES
    private void removeBodyAttributes(){
        htmlFile = Jsoup.parse(defaultCopy);
        Attributes attrs = htmlFile.body().attributes();
        for(Attribute e: attrs){
            htmlFile.body().removeAttr(e.getKey());
        }
        
        defaultCopy = (htmlFile.toString());
        defaultCopy = defaultCopy.replace("<body>",blogBodyModule);
        
        txtareaResult.setForeground(new Color(0, 128, 128));
        txtareaResult.append("SUCCESS: Converting body tag into MT module.\n");
    }
    
    //REMOVE LANDING PAGE SCRIPTS
    private void removeLandingPageSctipt(){
        if(defaultCopy.contains("bat.bing.com")){
            htmlFile = Jsoup.parse(defaultCopy);
            Elements d = htmlFile.select("script");
            for(Element temp: d){
                if((temp.toString()).contains("bat.bing.com")){
                    defaultCopy = defaultCopy.replace((temp.toString()), "");
                }
            }
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("SUCCESS: Removing Landing page scripts.\n");
        }
        else{
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("WARNING: Landing page scripts not available.\n");
        }
    }
    
    //REMOVE GOOGLE ANALYTICS CODE
    private void removeGoogleAnalyticsCode(){
        if(defaultCopy.contains("google-analytics.com")){
            htmlFile = Jsoup.parse(defaultCopy);
            Elements d = htmlFile.select("script");
            for(Element temp: d){
                if((temp.toString()).contains("google-analytics.com")){
                    defaultCopy = defaultCopy.replace((temp.toString()), "");
                }
            }
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("SUCCESS: Removing google analytics code.\n");
        }
        else{
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("WARNING: Google Analytics Code not available.\n");
        }
    }
    
    //COLUMN MAIN CONTENT REPLACEMENT
    private void replaceColumnMain(){
        if(defaultCopy.contains("column-main") == true){
            htmlFile = Jsoup.parse(defaultCopy);
            Element columnMain = htmlFile.select(".column-main").first();
            if((columnMain.toString()).contains("column-side") == false){
                columnMain.text(blogContentMain);
                defaultCopy = htmlFile.toString();
            }
            else{
                htmlFile.select(".page-title").first().text(headingModule);
                htmlFile.select(".column-main .content").first().text(contentModule);
                
                defaultCopy = htmlFile.toString();
            }
            
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("SUCCESS: Replacing main content with MT module.\n");
        }
        else{
            txtareaResult.setForeground(new Color(210, 35, 35));
            txtareaResult.append("ERROR: Column main not present in default page.\n");
        }
    }
    
    private void removeSiloNav(){
        if(defaultCopy.contains("silo") == true){
            htmlFile = Jsoup.parse(defaultCopy);
            
            htmlFile.select("[class~=silo.*]").first().remove();
            defaultCopy = htmlFile.toString();
            
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("SUCCESS: Silo nav has been removed.\n");
        }
        else{
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("WARNING: Silo nav not avaialable.\n");
        }
    }
    
    //UPDATE COLUMN SIDE CONTENT
    private void updateColumnSide(){
        if(defaultCopy.contains("column-side") == true){
            columnSideStatus = true;
            htmlFile = Jsoup.parse(defaultCopy);
            Element columnSide = htmlFile.select(".column-side").first();
            Elements childs = columnSide.children();
            childs.stream().filter((e) -> ((e.toString()).contains("#if") || (e.toString()).contains("nav-practice"))).forEach((e) -> {
                e.remove();
            });
            htmlFile.select(".column-side").first().prepend(blogColumnSide);
            defaultCopy = htmlFile.toString();
            
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("SUCCESS: Updating column side with MT module.\n");
        }
        else{
            columnSideStatus = false;
            htmlFile = Jsoup.parse(defaultCopy);
            htmlFile.select(".container-column-main").first().after(fullColumnSide);
            defaultCopy = htmlFile.toString();
            txtareaResult.setForeground(new Color(210, 35, 35));
            txtareaResult.append("SUCCESS: Column Side has been added.\n");
        }
    }
    
    //UPDATE SEARCH MODULE AFTER VERRIFICATION
    private void updateSearchForm(){
        
        if((chckbxMobileSearch.isSelected() == true)  && (defaultCopy.contains("column-side") == true)){
            searchFormStatus = false;
            htmlFile = Jsoup.parse(defaultCopy);
            htmlFile.select(".column-side").first().prepend(SearchMtModule);
            defaultCopy = htmlFile.toString();
            
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("SUCCESS: Desktop search has been added.\n");
        }
        else if((defaultCopy.contains("searchFormDesignSearchTerms") == false) && (defaultCopy.contains("fl2-module-search-autofill") == false) && (defaultCopy.contains("column-side") == true)){
            searchFormStatus = false;
            htmlFile = Jsoup.parse(defaultCopy);
            htmlFile.select(".column-side").first().prepend(searchFull);
            defaultCopy = htmlFile.toString();
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("SUCCESS: Search box has been added.\n");
        }
        else{
            searchFormStatus = true;
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("WARNING: Search box already available in site.\n");
        }
    }
    
    //CONVERT SHORT FORM FSP TO MT CODE
    private void convertShortForm() throws IOException{
        shortFormStatus = false;
        shortFormNewStatus = "";
        
        if((defaultCopy.contains("id=\"short-form") == true)){
            htmlFile = Jsoup.parse(defaultCopy);
            Element shortForm = htmlFile.select("[id~=short-form.*]").first();
            String id = shortForm.id();
            String result = convertModule(id);
            defaultCopy = defaultCopy.replaceAll((shortForm.toString()), result);
            shortFormStatus = true;
            
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("SUCCESS: Short form converted to MT module.\n");
        }
        
        if((defaultCopy.contains("id=\"Short-Form") == true)){
            htmlFile = Jsoup.parse(defaultCopy);
            Element shortForm = htmlFile.select("[id~=Short-Form.*]").first();
            String id = shortForm.id();
            String result = convertModule(id);
            defaultCopy = defaultCopy.replaceAll((shortForm.toString()), result);
            shortFormStatus = true;
            
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("SUCCESS: Short form converted to MT module.\n");
        }
        
        if((shortFormStatus == false) && (defaultCopy.contains("column-side") == true)){
            htmlFile = Jsoup.parse(defaultCopy);
            Element columnSide = htmlFile.select(".column-side").first();
            columnSide.append(blogShortForm);
            Element bodyCode = htmlFile.select("body").first();
            bodyCode.append(shortFormScript);
            defaultCopy = htmlFile.toString();
            shortFormStatus = true;
            shortFormNewStatus = "Tanish";
            copySubmitButtons();
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("SUCCESS: Short form has been added.\n");
        }
    }
    
    //CONVERT CONTACT FSP MODULE TO MT MODULE
    private void convertContactModule(){
        if(defaultCopy.contains("ContactModule") == true){
            htmlFile = Jsoup.parse(defaultCopy);
            Element contact = htmlFile.select("#ContactModule").first();
            String id = "ContactModule";
            String result = convertModule(id);
            defaultCopy = defaultCopy.replaceAll((contact.toString()), result);
            
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("SUCCESS: Contact module converted to MT module.\n");
        }
        else{
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("WARNING: Contact Module not present in site.\n");
        }
    }
    
    //CONVERT FSP MODULE TO MT MODULE
    private String convertModule(String id){
        String mtModules = "<!--#include virtual=\"/modules/" + id + ".html\" -->";
        return mtModules
;    }
    
    //CONVERT FINEPRINT FSP MODULE TO MT MODULE
    private void convertFinePrint(){
        if(defaultCopy.contains("fine-print") == true){
            htmlFile = Jsoup.parse(defaultCopy);
            Element finePrint = htmlFile.select(".fine-print").first();
            finePrint.text(blogFinePrint);
            defaultCopy = htmlFile.toString();
        }
        else{
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("WARNING: Fine Print not present in site.\n");
        }
    }
    
    //CONVERT GEOGRAPHICAL FSP CODE
    private void convertGeographical(){
        if(defaultCopy.contains("FSPgeographicalFooter") == true){
            htmlFile = Jsoup.parse(defaultCopy);
            Element geoFooter = htmlFile.select("#FSPgeographicalFooter").first();
            String id = "FSPgeographicalFooter";
            String result = convertModule(id);
            defaultCopy = defaultCopy.replaceAll((geoFooter.toString()), result);
            
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("SUCCESS: Geographical Module has been converted to MT.\n");
        }
        else{
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("WARNING: Geographical Module not present.\n");
        }
    }
    
    //CONVERT BODY MT MODULE
    private void convertBodyToMt(){
        int a = defaultCopy.lastIndexOf(comments);
        a = a - 1;
        StringBuilder sb = new StringBuilder(defaultCopy);
        sb.insert(a,"footerBodyMtModule");
        defaultCopy = sb.toString();
    }
    
    //CONVERT SPECIAL ENCODED CHARACTERS
    private void covertEncodedWords(){
        defaultCopy = defaultCopy.replaceAll("&lt;", "<");
        defaultCopy = defaultCopy.replaceAll("&gt;", ">");
        
        txtareaResult.setForeground(new Color(0, 128, 128));
        txtareaResult.append("SUCCESS: Beautifying the HTML code.\n");
    }
    
    //WRITING CODES TO THE BLOG FILE
    private void writeFile(String fileName, String content) throws IOException{
        try {
            File file = new File(fileName);
            try (FileWriter fileWriter = new FileWriter(file)) {
                fileWriter.write(content);
                fileWriter.flush();
                fileWriter.close();
            }
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("SUCCESS: Wrinting code to blog file.\n");
        } 
        catch (IOException e) {
            txtareaResult.setForeground(new Color(210, 35, 35));
            txtareaResult.append("ERROR: Something went wrong while writing blog file.\n");
        }
    }
    
    //RECHECKING FOR FSP MODULES
    private void recheckFspModule(){
        htmlFile = Jsoup.parse(defaultCopy);
        Elements extraFSP = htmlFile.select("div[fsp=design]");
        extraFSP.stream().forEach((fsp) -> {
            String ID = fsp.id();
            String result = convertModule(ID);
            defaultCopy = defaultCopy.replaceAll((fsp.toString()), result);
        });
        
        txtareaResult.setForeground(new Color(0, 128, 128));
        txtareaResult.append("SUCCESS: Cross checking the FSP modules.\n");
    }
    
    //REMOVE BLOG COMMENT
    private void removeBlogCssComment(String blogCss){
        try
            {
            File file = new File(blogCss);
            String oldtext = "";
            try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
                String line;
                
                while ((line = reader.readLine()) != null) {
                    oldtext += line + "\r\n";
                }
            }
            
            if(oldtext.contains("import/blog") == true){
                
                String newtext = oldtext.replaceAll("// @import \"import/blog\";", "@import \"import/blog\";");

                try (FileWriter writer = new FileWriter(blogCss)) {
                    writer.write(newtext);
                }
                txtareaResult.setForeground(new Color(0, 128, 128));
                txtareaResult.append("SUCCESS: Removing CSS comment from CSS file.\n");
            }
            else{
                String newtext = oldtext.replaceAll("// @import \"import/template\"; // please use as a reference", "// @import \"import/template\"; // please use as a reference\n@import \"import/blog\";");
                try (FileWriter writer = new FileWriter(blogCss)) {
                    writer.write(newtext);
                }
                txtareaResult.setForeground(new Color(0, 128, 128));
                txtareaResult.append("SUCCESS: Adding CSS basic styles.\n");
            }
            
        }
        catch (IOException e){
           txtareaResult.setForeground(new Color(210, 35, 35));
           txtareaResult.append("Error: Something went wrong while uncommenting code.\n");
        }
    }
    
    //APPENDING CSS METHOD DEFINITION
    public void appendCssCode(String src, String trg){
        InputStream inStream;
        OutputStream outStream;
        try{
                
                File sourceFile =new File(src);
                File targetFile =new File(trg);

                inStream = new FileInputStream(sourceFile);
                outStream = new FileOutputStream(targetFile, true);

                byte[] buffer = new byte[1024];

                int length;
                while ((length = inStream.read(buffer)) > 0){
                    outStream.write(buffer, 0, length);
                }

                inStream.close();
                outStream.close();

                txtareaResult.setForeground(new Color(0, 128, 128));
                txtareaResult.append("SUCCESS: Looking for CSS needs to be added.\n");

            }
            catch (IOException e) {
                txtareaResult.setForeground(new Color(210, 35, 35));
                txtareaResult.append("ERROR: Something went wrong while looking into css.\n");
            }
           
    }
    
    //WRITING CSS CODE FOR BLOG
    private void copyCssCode(){
        
        if(chckbxBoxDesign.isSelected() == false)
        {
            appendCssCode(sourceBlogCSS, cssFileName);
        }
        else{
            appendCssCode(sourceBlogNormalCSS, cssFileName);
        }
        
        if(shortFormNewStatus.equals("Tanish")){
            appendCssCode(sourceBlogShortCSS, cssFileName);
        }
        
        if(searchFormStatus == false){
            appendCssCode(sourceBlogSearchCSS, cssFileName);
        }
        
        if(columnSideStatus == false){
            appendCssCode(sourceColumnSideCSS, cssFileName);
        }
        
        if(chckbxMobileSearch.isSelected()){
            appendCssCode(sourceMobileSearch, cssFileName);
        }
        
        appendCssCode(sourceBlogComments, cssFileName);
        txtareaResult.setForeground(new Color(0, 128, 128));
        txtareaResult.append("SUCCESS: CSS is ready to be copied.\n");
    }
    
    //Read CSS File Code
    private void readCssFile(String cssFile){
        try {
            File file = new File(cssFile);
            StringBuilder stringBuffer;
            try (FileReader fileReader = new FileReader(file)) {
                BufferedReader bufferedReader = new BufferedReader(fileReader);
                stringBuffer = new StringBuilder();
                String line;
                
                cssCopy = "";
                
                while ((line = bufferedReader.readLine()) != null) {
                    stringBuffer.append(line);
                    stringBuffer.append("\n");
                }
                cssCopy = stringBuffer.toString();
            }
        } 
        catch (IOException e) {
            txtareaResult.setForeground(new Color(210, 35, 35));
            txtareaResult.append("ERROR: Blog CSS file is not accessible.\n");
        }
    }
    
    private void updateCssData() throws IOException{
        
        String linkColor, linkHoverColor, fontFamily, buttonColor, buttonHoverColor, btnBgColor, btnBgHoverColor, boxDesign;

        String linkColorNamingConvention = "tanishLinkColor";
        String linkHoverColorNamingConvention = "tanishLinkHoverColor";
        String fontFamilyNamingConvention = "tanishFontFamily";
        String buttonColorNamingConvention = "tanishButtonColor";
        String buttonHoverColorNamingConvention = "tanishButtonHoverColor";
        String buttonBackColorNamingConvention = "tanishBtnBackColor";
        String buttonBackHoverColorNamingConvention = "tanishBtnBackHoverColor";
        String BoxDesignBackgroundColorNamingConvention = "tanishBoxBackground";

        String defaultLinkColor = "#ff0000";
        String defaultLinkHoverColor = "#13D0A6";
        String defaultFontFamily = "$font-arial";
        String defaultButtonColor = "#3F51B5";
        String defaultButtonHoverColor = "#009688";
        String defaultBtnBackColor = "#009688";
        String defaultBtnBackHoverColor = "#3F51B5";
        String defaultBoxDesignBackgroundColor = "#302f2f";

        linkColor = txtLinkColor.getText();
        linkHoverColor = txtLinkHoverColor.getText();

        fontFamily = txtFontFamily.getText();

        buttonColor = txtButtonColor.getText();
        buttonHoverColor = txtButtonHoverColor.getText();

        btnBgColor = txtButtonBackColor.getText();
        btnBgHoverColor = txtButtonBackHoverColor.getText();

        boxDesign = txtButtonBoxDesign.getText();

        // READ CSS FILE AND COPY THE CONTENT IN STRING
        readCssFile(cssFileName);

        if(linkColor.equals("") || linkHoverColor.equals("") || fontFamily.equals("") || buttonColor.equals("") || buttonHoverColor.equals("") || btnBgColor.equals("") || btnBgHoverColor.equals("") || boxDesign.equals("")){
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("SUCCESS: CSS copied with some default values.\n");
        }
        else{
            txtareaResult.setForeground(new Color(0, 128, 128));
            txtareaResult.append("SUCCESS: CSS copied with the defined values.\n");
        }

        // LINK COLOR
        if(!linkColor.equals("")){
            cssCopy = cssCopy.replace(linkColorNamingConvention, linkColor);
        }
        else{
            cssCopy = cssCopy.replace(linkColorNamingConvention, defaultLinkColor);
        }

        // LINK HOVER COLOR
        if(!linkHoverColor.equals("")){
            cssCopy = cssCopy.replace(linkHoverColorNamingConvention, linkHoverColor);
        }
        else{
            cssCopy = cssCopy.replace(linkHoverColorNamingConvention, defaultLinkHoverColor);
        }

        // FONT FAMILY
        if(fontFamily.equals("") == false){
            cssCopy = cssCopy.replace(fontFamilyNamingConvention, fontFamily);
        }
        else{
            cssCopy = cssCopy.replace(fontFamilyNamingConvention, defaultFontFamily);
        }

        // BUTTON COLOR
        if(!buttonColor.equals("")){
            cssCopy = cssCopy.replace(buttonColorNamingConvention, buttonColor);
        }
        else{
            cssCopy = cssCopy.replace(buttonColorNamingConvention, defaultButtonColor);
        }

        // BUTTON HOVER COLOR
        if(!buttonHoverColor.equals("")){
            cssCopy = cssCopy.replace(buttonHoverColorNamingConvention, buttonHoverColor);
        }
        else{
            cssCopy = cssCopy.replace(buttonHoverColorNamingConvention, defaultButtonHoverColor);
        }

        // BUTTON BACKGROUND COLOR
        if(!btnBgColor.equals("")){
            cssCopy = cssCopy.replace(buttonBackColorNamingConvention, btnBgColor);
        }
        else{
            cssCopy = cssCopy.replace(buttonBackColorNamingConvention, defaultBtnBackColor);
        }

        // BUTTON BACKGROUND HOVER COLOR
        if(!btnBgHoverColor.equals("")){
            cssCopy = cssCopy.replace(buttonBackHoverColorNamingConvention, btnBgHoverColor);
        }
        else{
            cssCopy = cssCopy.replace(buttonBackHoverColorNamingConvention, defaultBtnBackHoverColor);
        }

        // BOX DESIGN BACKGROUND HOVER COLOR
        if(!boxDesign.equals("")){
            cssCopy = cssCopy.replace(BoxDesignBackgroundColorNamingConvention, boxDesign);
        }
        else{
            cssCopy = cssCopy.replace(BoxDesignBackgroundColorNamingConvention, defaultBoxDesignBackgroundColor);
        }

        // WRITE STRING BACK TO THE CSS FILE
        writeFile(cssFileName, cssCopy);
        txtareaResult.setForeground(new Color(0, 128, 128));
        txtareaResult.append("SUCCESS: Writing CSS file with blog CSS.\n");
    }
    
    //DELETE PROCESS CLASS WITH SWING WORKER
    class deleteProgress extends SwingWorker<Void, Void>{
        public deleteProgress() {
        }
        @Override
        protected Void doInBackground() throws Exception {
            processStatus(0);
            
            folderName = "";
            folderBrowse = "";
            if(txtFolderName.getText().contains(":") == true){
                folderBrowse = txtFolderName.getText();
            }
            else{
                folderName = txtFolderName.getText();
            }
            
            Boolean deleteStatus = false;
            if(folderName.length() != 0){
                folderChar = String.valueOf(folderName.charAt(0));
                folderResult = buildTargetFolderPath(folderName, folderChar);
                processStatus(25);
                if(folderResult == true){
                    blogFolderName = targetFolderPath + "\\design\\templates-blog";
                    File dir = new File(blogFolderName);
                    processStatus(50);
                    if(dir.exists()){
                        int response = JOptionPane.showConfirmDialog(null, "Are you sure to delete the blog folder?", "Confirm",
                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                        if (response == JOptionPane.YES_OPTION) {
                            deleteStatus = deleteDir(dir);
                        }
                        processStatus(75);
                        if(deleteStatus == true){
                            processStatus(100);
                            txtareaResult.setForeground(new Color(0, 128, 128));
                            txtareaResult.setText("SUCCESS: Blog folder has deleted.\n");
                        }
                        else{
                            processStatus(100);
                            txtareaResult.setForeground(new Color(210, 35, 35));
                            txtareaResult.setText("ERROR: Blog folder delete process cancelled.\n");
                        }
                    }
                    else{
                        processStatus(100);
                        txtareaResult.setForeground(new Color(210, 35, 35));
                        txtareaResult.setText("ERROR: Blog folder does not exists.\n");
                    }
                }
                else{
                    processStatus(100);
                    txtareaResult.setForeground(new Color(210, 35, 35));
                    txtareaResult.setText("ERROR: Folder you are looking into does not exists.\n");
                }
            }
            else if(folderBrowse.length() != 0){
                folderResult = buildTargetFolderPath(folderBrowse);
                processStatus(25);
                if(folderResult == true){
                    blogFolderName = folderBrowse + "\\design\\templates-blog";
                    File dir = new File(blogFolderName);
                    processStatus(50);
                    if(dir.exists()){
                        int response = JOptionPane.showConfirmDialog(null, "Are you sure to delete the blog folder?", "Confirm",
                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                        if (response == JOptionPane.YES_OPTION) {
                            deleteStatus = deleteDir(dir);
                        }
                        processStatus(75);
                        if(deleteStatus == true){
                            processStatus(100);
                            txtareaResult.setForeground(new Color(0, 128, 128));
                            txtareaResult.setText("SUCCESS: Blog folder has deleted.\n");
                        }
                        else{
                            processStatus(100);
                            txtareaResult.setForeground(new Color(210, 35, 35));
                            txtareaResult.setText("ERROR: Blog folder delete process cancelled.\n");
                        }
                    }
                    else{
                        processStatus(100);
                        
                        txtareaResult.setForeground(new Color(210, 35, 35));
                        txtareaResult.setText("ERROR: Blog folder does not exists.\n");
                    }
                }
                else{
                    processStatus(100);
                    txtareaResult.setForeground(new Color(210, 35, 35));
                    txtareaResult.setText("ERROR: Folder you are looking into does not exists.\n");
                }
            }
            else{
                processStatus(100);
                txtareaResult.setForeground(new Color(210, 35, 35));
                txtareaResult.setText("ERROR: Please enter the folder name.\n");
            }
            btnDelete.setEnabled(true);
            
            processStatusFadeIn();
            processStatusFadeOut();
            
            return null;
        }
    }
    
    //RESET PROCESS CLASS WITH SWING WORKER
    class backupProgress extends SwingWorker<Void, Void>{
        public backupProgress() {
        }
        @Override
        protected Void doInBackground() throws Exception {
            
            folderName = "";
            folderBrowse = "";
            if(txtFolderName.getText().contains(":") == true){
                folderBrowse = txtFolderName.getText();
            }
            else{
                folderName = txtFolderName.getText();
            }
            
            processStatus(0);
            if(folderName.length() != 0){
                folderChar = String.valueOf(folderName.charAt(0));
                folderResult = buildTargetFolderPath(folderName, folderChar);
                processStatus(25);
                if(folderResult == true){
                    blogFolderName = targetFolderPath + "\\design\\templates-blog";
                    File dir = new File(blogFolderName);
                    DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy hh-mm-ss");
                    Date date = new Date();
                    String currentDate = (dateFormat.format(date));
                    String newBlogFolderName = blogFolderName + " Backup " + currentDate;
                    File newDir = new File(newBlogFolderName);
                    processStatus(50);
                    if(dir.exists()){
                        Boolean renameStatus = dir.renameTo(newDir);
                        processStatus(75);
                        if(renameStatus == true){
                            processStatus(100);
                            txtareaResult.setForeground(new Color(0, 128, 128));
                            txtareaResult.setText("SUCCESS: Blog has been backed up.\n");
                        }
                        else{
                            processStatus(100);
                            txtareaResult.setForeground(new Color(210, 35, 35));
                            txtareaResult.setText("ERROR: Something went wrong while backing up folder.\n");
                        }
                    }
                    else{
                        processStatus(100);
                        txtareaResult.setForeground(new Color(210, 35, 35));
                        txtareaResult.setText("ERROR: Blog folder does not exists.\n");
                    }
                }
                else{
                    processStatus(100);
                    txtareaResult.setForeground(new Color(210, 35, 35));
                    txtareaResult.setText("ERROR: Folder you are looking into does not exists.\n");
                }
            }
            else if(folderBrowse.length() != 0){
                folderResult = buildTargetFolderPath(folderBrowse);
                processStatus(25);
                if(folderResult == true){
                    blogFolderName = folderBrowse + "\\design\\templates-blog";
                    File dir = new File(blogFolderName);
                    DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy hh-mm-ss");
                    Date date = new Date();
                    String currentDate = (dateFormat.format(date));
                    String newBlogFolderName = blogFolderName + " Backup " + currentDate;
                    File newDir = new File(newBlogFolderName);
                    processStatus(50);
                    if(dir.exists()){
                        Boolean renameStatus = dir.renameTo(newDir);
                        processStatus(75);
                        if(renameStatus == true){
                            processStatus(100);
                            txtareaResult.setForeground(new Color(0, 128, 128));
                            txtareaResult.setText("SUCCESS: Blog has been backed up.\n");
                        }
                        else{
                            processStatus(100);
                            txtareaResult.setForeground(new Color(210, 35, 35));
                            txtareaResult.setText("ERROR: Something went wrong while backing up folder.\n");
                        }
                    }
                    else{
                        processStatus(100);
                        txtareaResult.setForeground(new Color(210, 35, 35));
                        txtareaResult.setText("ERROR: Blog folder does not exists.\n");
                    }

                }
                else{
                    processStatus(100);
                    txtareaResult.setForeground(new Color(210, 35, 35));
                    txtareaResult.setText("ERROR: Folder you are looking into does not exists.\n");
                }
            }
            else{
                processStatus(100);
                txtareaResult.setForeground(new Color(210, 35, 35));
                txtareaResult.setText("ERROR: Please enter the folder name.\n");
            }
            btnBackup.setEnabled(true);
            
            processStatusFadeIn();
            processStatusFadeOut();
            
            return null;
        }
    }
    
    //DELETE BLOG FOLDER
    public static boolean deleteDir(File dir) {
      if (dir.isDirectory()) {
         String[] children = dir.list();
          for (String children1 : children) {
              boolean success = deleteDir(new File(dir, children1));
              if (!success) {
                  return false;
              }
          }
      }
      return dir.delete();
    }
    
    // COPY IMAGE FROM SOURCE FOLDER TO DESTINATION FOLDER
    private void copyFiles() throws IOException{
        File sourceFile = new File("C:\\Program Files\\BlogApp\\dist\\lib\\css\\bg-subscribe.png");
        String destPath = targetFolderPath + "\\design\\images\\bg-subscribe.png";
        File destinationFile = new File(destPath);
        if(!destinationFile.exists()){
            Path sourcePath = sourceFile.toPath();
            Path destinationPath = destinationFile.toPath();
            Files.copy(sourcePath, destinationPath);
        }
    }
    
    // COPY IMAGE FROM SOURCE FOLDER TO DESTINATION FOLDER
    private void copySubmitButtons() throws IOException{
        File submitBtn = new File("C:\\Program Files\\BlogApp\\dist\\lib\\css\\formSubmitShort.gif");
        File submitBtnO = new File("C:\\Program Files\\BlogApp\\dist\\lib\\css\\formSubmitShort-o.gif");
        String destPath1 = targetFolderPath + "\\design\\images\\formSubmitShort.gif";
        String destPath2 = targetFolderPath + "\\design\\images\\formSubmitShort-o.gif";
        File destinationFile1 = new File(destPath1);
        File destinationFile2 = new File(destPath2);
        if(!destinationFile1.exists()){
            Path sourcePath = submitBtn.toPath();
            Path destinationPath = destinationFile1.toPath();
            Files.copy(sourcePath, destinationPath);
        }
        if(!destinationFile2.exists()){
            Path sourcePath = submitBtnO.toPath();
            Path destinationPath = destinationFile2.toPath();
            Files.copy(sourcePath, destinationPath);
        }
    }
    
}